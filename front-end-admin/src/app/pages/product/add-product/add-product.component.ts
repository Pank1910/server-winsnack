import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-add-product',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './add-product.component.html',
  styleUrls: []
})
export class AddProductComponent {
  constructor(private http: HttpClient) {} // üõ† Inject HttpClient ƒë·ªÉ g·ªçi API

  // üõí D·ªØ li·ªáu s·∫£n ph·∫©m kh·ªõp v·ªõi `Product.ts`
  product = {
    product_name: '',
    product_dept: '',
    stocked_quantity: 0,
    unit_price: 0,
    discount: 0,
    createdAt: '',
    product_detail: '',
    image_1: '',
    image_2: '',
    image_3: '',
    image_4: '',
    image_5: '',
    rating: 4,
    isNew: false
  };

  // Danh m·ª•c s·∫£n ph·∫©m
  categories = ['B√°nh tr√°ng tr·ªôn s·∫µn', 'B√°nh tr√°ng n∆∞·ªõng','B√°nh tr√°ng ng·ªçt','Combo b√°nh tr√°ng mix v·ªã','Nguy√™n li·ªáu l·∫ª'];

  // üñº M·∫£ng l∆∞u ·∫£nh tr∆∞·ªõc khi g·ª≠i API
  previewImages: string[] = [];
  selectedImages: File[] = [];

  /** üßÆ T√≠nh gi√° sau khuy·∫øn m√£i */
  calculateFinalPrice() {
    this.product.unit_price = this.product.discount > 0
      ? this.product.unit_price * (1 - this.product.discount / 100)
      : this.product.unit_price;
  }

  /** üñº X·ª≠ l√Ω t·∫£i ·∫£nh */
  handleImageUpload(event: any) {
    const files: FileList = event.target.files;
    if (files.length > 0) {
      Array.from(files).forEach((file: File, index) => {
        if (index < 5) { // Gi·ªõi h·∫°n 5 ·∫£nh
          this.selectedImages.push(file);

          // ƒê·ªçc file ƒë·ªÉ hi·ªÉn th·ªã tr∆∞·ªõc khi g·ª≠i API
          const reader = new FileReader();
          reader.onload = (e: any) => {
            this.previewImages.push(e.target.result as string);
          };
          reader.readAsDataURL(file);
        }
      });
    }
  }

  /** üóë X√≥a ·∫£nh ƒë√£ ch·ªçn */
  removeImage(index: number) {
    this.selectedImages.splice(index, 1);
    this.previewImages.splice(index, 1);
  }

  /** üöÄ G·ª≠i d·ªØ li·ªáu l√™n API */
  submitForm() {
    console.log('üìå D·ªØ li·ªáu s·∫£n ph·∫©m:', this.product);

    // Ki·ªÉm tra l·ªói
    if (!this.product.product_name || !this.product.product_dept) {
      alert('‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin s·∫£n ph·∫©m!');
      return;
    }

    // üìù T·∫°o FormData ƒë·ªÉ g·ª≠i file ·∫£nh & d·ªØ li·ªáu s·∫£n ph·∫©m
    const formData = new FormData();
    formData.append('product_name', this.product.product_name);
    formData.append('product_dept', this.product.product_dept);
    formData.append('stocked_quantity', String(this.product.stocked_quantity));
    formData.append('unit_price', String(this.product.unit_price));
    formData.append('discount', String(this.product.discount));
    formData.append('createdAt', new Date().toISOString());
    formData.append('product_detail', this.product.product_detail);
    formData.append('rating', String(this.product.rating));
    formData.append('isNew', String(this.product.isNew));

    // üñº G·ª≠i t·ªëi ƒëa 5 ·∫£nh, map v√†o image_1 -> image_5
    this.selectedImages.forEach((file, index) => {
      formData.append(`image_${index + 1}`, file);
    });

    // üõ† G·ª≠i d·ªØ li·ªáu l√™n API
    this.http.post('http://localhost:5001/products', formData).subscribe({
      next: (response) => {
        console.log('‚úÖ API Response:', response);
        alert('üéâ S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!');
      },
      error: (error) => {
        console.error('‚ùå L·ªói API:', error);
        alert('‚ö†Ô∏è Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m, vui l√≤ng th·ª≠ l·∫°i!');
      }
    });
  }
}
